const PuzzleValue = require("./puzzle_value.js");
 numbersFrom1to9 = [1,2,3,4,5,6,7,8,9];
sudoku = []
placedNumbers = [];
initalPuzzle = [];
count =0;
initalPuzzle =[
    [[1,1,0,0],[1,2,0],[1,3,3], [1,4,9],[1,5,0],[1,6,0], [1,7,0],[1,8,0],[1,9,6]],
    [[2,1,0],[2,2,0],[2,3,0], [2,4,0],[2,5,0],[2,6,7], [2,7,1],[2,8,4],[2,9,0]],
    [[3,1,7],[3,2,8],[3,3,1], [3,4,5],[3,5,0],[3,6,0], [3,7,0],[3,8,0],[3,9,0]],
    
    [[4,1,1],[4,2,7],[4,3,0], [4,4,0],[4,5,0],[4,6,0], [4,7,0],[4,8,0],[4,9,0]],
    [[5,1,0],[5,2,0],[5,3,0], [5,4,0],[5,5,0],[5,6,0], [5,7,0],[5,8,0],[5,9,0]],
    [[6,1,0],[6,2,0],[6,3,0], [6,4,6],[6,5,0],[6,6,1], [6,7,0],[6,8,0],[6,9,9]],
    
    [[7,1,9],[7,2,0],[7,3,0], [7,4,8],[7,5,7],[7,6,6], [7,7,0],[7,8,0],[7,9,0]],
    [[8,1,0],[8,2,4],[8,3,0], [8,4,2],[8,5,0],[8,6,0], [8,7,0],[8,8,0],[8,9,0]],
    [[9,1,0],[9,2,2],[9,3,7], [9,4,0],[9,5,1],[9,6,3], [9,7,0],[9,8,0],[9,9,0]],
];
class PuzzleService{
    constructor(difficultyLevel){
        this.difficultyLevel = difficultyLevel;
    }

     getPuzzle() {

      placedNumbers = [];
    
      sudoku =[
        [[1,1,0,0],[1,2,0,0],[1,3,0,0], [1,4,2,1],[1,5,0,0],[1,6,0,0], [1,7,5,1],[1,8,6,1],[1,9,7,1]],
        [[2,1,0,0],[2,2,0,0],[2,3,0,0], [2,4,5,1],[2,5,0,0],[2,6,8,1], [2,7,0,0],[2,8,0,0],[2,9,1,1]],
        [[3,1,3,1],[3,2,0,0],[3,3,0,0], [3,4,0,0],[3,5,0,0],[3,6,0,0], [3,7,8,1],[3,8,0,0],[3,9,4,1]],
        
        [[4,1,8,1],[4,2,0,0],[4,3,0,0], [4,4,0,0],[4,5,0,0],[4,6,1,1], [4,7,0,0],[4,8,0,0],[4,9,0,0]],
        [[5,1,1,1],[5,2,0,0],[5,3,2,1], [5,4,0,0],[5,5,0,0],[5,6,0,0], [5,7,3,1],[5,8,7,1],[5,9,8,1]],
        [[6,1,0,0],[6,2,6,1],[6,3,0,0], [6,4,0,0],[6,5,0,0],[6,6,0,0], [6,7,0,0],[6,8,0,0],[6,9,0,0]],
        
        [[7,1,2,1],[7,2,0,0],[7,3,7,1], [7,4,0,0],[7,5,5,1],[7,6,0,0], [7,7,0,0],[7,8,1,1],[7,9,0,0]],
        [[8,1,0,0],[8,2,0,0],[8,3,0,0], [8,4,0,0],[8,5,0,0],[8,6,3,1], [8,7,2,1],[8,8,0,0],[8,9,0,0]],
        [[9,1,0,0],[9,2,3,1],[9,3,0,0], [9,4,4,1],[9,5,0,0],[9,6,9,1], [9,7,0,0],[9,8,0,0],[9,9,0,0]],
    ];
    


      
      // this._setPuzzleValues();
       
       var puzzleValues = [] ;
       for(var i = 0 ; i< sudoku.length; i ++){
           for(var j = 0; j< sudoku[i].length; j++){
            puzzleValues.push( new PuzzleValue(sudoku[i][j][0],sudoku[i][j][1],sudoku[i][j][2]));
           }
       }
        
      
      return puzzleValues;
    }

    _setPuzzleValues(){
       
        while(placedNumbers.length < 25){
            var row = this._getRandomNumberBetween1To9();
            var col = this._getRandomNumberBetween1To9();
            while(sudoku[row-1][col-1][2]!=0){
                row = this._getRandomNumberBetween1To9();
                col = this._getRandomNumberBetween1To9();
            }
            var curretGrid = this._get3x3Grid(row,col);
            var numberToPlace = this._getRandomNumberBetween1To9();
            var cols = this._getColumn(col-1);
            while(((sudoku[row-1].filter(x=> x[2] == numberToPlace)).length !==0 ||
                cols.filter(x=>x[2] == numberToPlace).length !=0) ||
                (curretGrid.filter(x=> x[2] == numberToPlace).length !=0
                )){
                    numberToPlace = this._getRandomNumberBetween1To9();
                }
                sudoku[row-1][col-1][2] = numberToPlace;
                placedNumbers.push(numberToPlace);

        }
        



    }
   
    solvePuzzle(){
        this._processPuzzle();
 
        var puzzleValues = [] ;
        for(var i = 0 ; i< sudoku.length; i ++){
            for(var j = 0; j< sudoku[i].length; j++){
             puzzleValues.push( new PuzzleValue(sudoku[i][j][0],sudoku[i][j][1],sudoku[i][j][2]));
            }
        }
        // console.log(puzzleValues)
       
       return puzzleValues;
    }
    
    _processPuzzle(){
        for (var i = 0; i < sudoku.length; i++){
        
            for (var j = 0; j < sudoku[i].length; j++){
               
              if(sudoku[i][j][3]!=0){
                continue;
            }
            var row = 0;
            var col = 0;
            var collison = !this._placeNumber(i,j);
              while(collison){
                  
                while(col!=j){
                    console.log("looping");
                    if(sudoku[row][col][3]==0){
                       // sudoku[row][col][2]=0;
                        this._placeNumber(row,col);
                      }
                     
                      col = col+1;
                    //  row = row+1;
                    

                }
                 
               
                 collison = !this._placeNumber(i,j);
              //   console.log(count);
                 if(count>10000){
                    return;
                }
              }
              
              


                
               }
           }

    }

    _placeNumber(i,j){
       //console.log(count);
        var filteredNumbersFrom1to9 = numbersFrom1to9;
        if(sudoku[i][j][2]!=0){
            
            filteredNumbersFrom1to9 = numbersFrom1to9.filter( x => x != sudoku[i][j][2]);
            if(i==0&&j==1){
                console.log(filteredNumbersFrom1to9);
            }
           
            
        }
        
        count = count + 1;
        var cols= this._getColumn(j);
        var curretGrid = this._get3x3Grid(i+1,j+1);
        for(var num = 0; num< filteredNumbersFrom1to9.length;num++){
            var numberToPlace = filteredNumbersFrom1to9[num];
           
            if(((sudoku[i].filter(x=> x[2] == numberToPlace)).length ==0 &&
            cols.filter(x=>x[2] == numberToPlace).length ==0) &&
            (curretGrid.filter(x=> x[2] == numberToPlace).length ==0
            )){
                placedNumbers.push(numberToPlace);
                sudoku[i][j][2] = numberToPlace;
                return true;
            }
           

        }
        return false;
    }

    _getRandomNumberBetween1To9(){
        var selectedNumber  = numbersFrom1to9[Math.floor(Math.random()*numbersFrom1to9.length)];

        return selectedNumber;
    }

     _getColumn(col){
        var column = [];
        for(var i=0; i<sudoku.length; i++){
           column.push(sudoku[i][col]);
        }
        return column;
     }

     _get3x3Grid(row,col){
        var grid = [];
        var maxRow = 0;
        var maxCol = 0;
        var minRow = 0;
        var minCol = 0;

        if(row %3 == 0){
            minRow = row - 3;
            maxRow = row - 1;
        }else {
            var tempMaxRow = row;
            var tempMinRow = row;
           
            while (tempMaxRow % 3 != 0){
                tempMaxRow = tempMaxRow + 1;
            }
           
           while ((tempMinRow) % 3 != 0){
            tempMinRow = tempMinRow - 1;
            }
            maxRow = tempMaxRow -1 ;
            minRow = tempMinRow  ;
        }
        if(col %3 == 0){
            minCol = col - 3;
            maxCol = col - 1;
        }else {
            var tempMaxCol = col;
            var tempMinCol = col;
           
            while (tempMaxCol  % 3 != 0){
                tempMaxCol = tempMaxCol + 1;
            }
           
            while ((tempMinCol) % 3 != 0){
                tempMinCol = tempMinCol - 1;
            }

           
         maxCol = tempMaxCol -1 ;
         minCol = tempMinCol  ;

        }

        for(var i=minRow; i<sudoku.length;i++){
            for(var j = minCol ; j < sudoku[i].length; j++){
                if(i <= maxRow && j <= maxCol  ){
                    grid.push(sudoku[i][j]);
                }
                if (grid.length == 9){
                    return grid;
                }

            }
          
           
        }
       
     }



    
}

module.exports = PuzzleService;